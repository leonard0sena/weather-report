{"ast":null,"code":"var _jsxFileName = \"/Users/alboom/Desktop/Projects/weather-report/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport DayWeatherCard from './components/MainCard';\nimport WeekWeatherCard from './components/WeekCard';\nimport SearchInput from './components/SearchInput';\nimport { AppWrapper, DayCardWrapper, WeekCardWrapper } from './styles/app';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mainCardData, setMainCardData] = useState(null);\n  const [country, setCountry] = useState('');\n  const [city, setCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [coordsLoaded, setCoordsLoaded] = useState(false);\n  const [coords, setCoords] = useState({});\n  async function dateParse() {\n    let date = mainCardData.dt_txt;\n    let myDate = new Date(date);\n    const teste = new Intl.DateTimeFormat('pt-BR', {\n      day: '2-digit',\n      month: '2-digit'\n    });\n    console.log(teste);\n    let dateOutput = myDate.getDate() + \"\\\\\" + (myDate.getMonth() + 1);\n    let hourlyOutput = myDate.getHours() + \":\" + myDate.getMinutes();\n    // console.log(dateOutput, hourlyOutput)\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setCoords({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n      setCoordsLoaded(true);\n    });\n  }, [coordsLoaded]);\n  useEffect(() => {\n    if (Object.keys(coords).length !== 0) {\n      fetchData();\n    }\n  }, [coords]);\n  async function fetchData() {\n    let latitude = coords.latitude;\n    let longitude = coords.longitude;\n    const initialResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&exclude=hourly,daily&appid=ddbe22c4ca49e54f138a28fc1067af55&lang=pt_br&units=metric`);\n    const response = await initialResponse.json();\n    setWeatherData(response.list);\n    setMainCardData(response.list[0]);\n    setCity(response.city.name);\n    setCountry(response.city.country);\n  }\n  dateParse();\n  return /*#__PURE__*/_jsxDEV(AppWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n      updateCoords: setCoords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DayCardWrapper, {\n      children: mainCardData && /*#__PURE__*/_jsxDEV(DayWeatherCard, {\n        nowTemp: mainCardData.main.temp,\n        maxTemperature: mainCardData.main.temp_max,\n        minTemperature: mainCardData.main.temp_min,\n        cityName: city,\n        country: country,\n        icon: mainCardData.weather[0].icon,\n        description: mainCardData.weather[0].description,\n        date: mainCardData.dt_txt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeekCardWrapper, {\n      children: weatherData && weatherData.map((day, index) => /*#__PURE__*/_jsxDEV(WeekWeatherCard, {\n        maxTemperature: day.main.temp_max,\n        minTemperature: day.main.temp_min,\n        humidity: day.main.humidity,\n        icon: day.weather[0].icon,\n        date: day.dt_txt\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qWTN97LOBj6TPW7E0ZN7ZU51268=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","DayWeatherCard","WeekWeatherCard","SearchInput","AppWrapper","DayCardWrapper","WeekCardWrapper","App","mainCardData","setMainCardData","country","setCountry","city","setCity","weatherData","setWeatherData","coordsLoaded","setCoordsLoaded","coords","setCoords","dateParse","date","dt_txt","myDate","Date","teste","Intl","DateTimeFormat","day","month","console","log","dateOutput","getDate","getMonth","hourlyOutput","getHours","getMinutes","navigator","geolocation","getCurrentPosition","position","latitude","longitude","Object","keys","length","fetchData","initialResponse","fetch","response","json","list","name","main","temp","temp_max","temp_min","weather","icon","description","map","index","humidity"],"sources":["/Users/alboom/Desktop/Projects/weather-report/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport DayWeatherCard from './components/MainCard';\nimport WeekWeatherCard from './components/WeekCard';\nimport SearchInput from './components/SearchInput';\n\nimport { AppWrapper, DayCardWrapper, WeekCardWrapper } from './styles/app'\n\nfunction App() {\n  const [mainCardData, setMainCardData] = useState(null)\n  const [country, setCountry] = useState('')\n  const [city, setCity] = useState('')\n  const [weatherData, setWeatherData] = useState(null)\n  const [coordsLoaded, setCoordsLoaded] = useState(false)\n  const [coords, setCoords] = useState({})\n\n  async function dateParse () {\n    let date = mainCardData.dt_txt\n    let myDate = new Date(date)\n    const teste = new Intl.DateTimeFormat('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n    })\n    console.log(teste)\n\n    let dateOutput = myDate.getDate() + \"\\\\\" +  (myDate.getMonth()+1)\n    let hourlyOutput = myDate.getHours() + \":\" + (myDate.getMinutes())\n    // console.log(dateOutput, hourlyOutput)\n    \n  }\n\n  useEffect(() => {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCoords({ latitude: position.coords.latitude, longitude: position.coords.longitude })\n        setCoordsLoaded(true)\n      })\n  }, [coordsLoaded])\n\n  useEffect(() => {\n    if(Object.keys(coords).length !== 0) {\n      fetchData()\n    }\n  }, [coords])\n  \n  async function fetchData() {\n    let latitude = coords.latitude\n    let longitude = coords.longitude\n    const initialResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&exclude=hourly,daily&appid=ddbe22c4ca49e54f138a28fc1067af55&lang=pt_br&units=metric`)\n    const response = await initialResponse.json()\n    setWeatherData(response.list)\n    setMainCardData(response.list[0])\n    setCity(response.city.name)\n    setCountry(response.city.country)\n  }\n  dateParse()\n  return (\n    <AppWrapper>\n      <SearchInput updateCoords={setCoords}/>\n      <DayCardWrapper>\n        {mainCardData && (\n          <DayWeatherCard\n            nowTemp={mainCardData.main.temp}\n            maxTemperature={mainCardData.main.temp_max} \n            minTemperature={mainCardData.main.temp_min} \n            cityName={city}\n            country={country}\n            icon={mainCardData.weather[0].icon}\n            description={mainCardData.weather[0].description}\n            date={mainCardData.dt_txt}\n          />\n        )}\n      </DayCardWrapper>\n      <WeekCardWrapper>\n        {weatherData && weatherData.map((day, index) => (\n          <WeekWeatherCard \n            key={index} \n            maxTemperature={day.main.temp_max} \n            minTemperature={day.main.temp_min} \n            humidity={day.main.humidity} \n            icon={day.weather[0].icon}\n            date={day.dt_txt}\n          />\n        ))}\n      </WeekCardWrapper>\n    </AppWrapper>\n\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}