{"ast":null,"code":"var _jsxFileName = \"/Users/alboom/Desktop/Projects/weather-report/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport MainWeatherCard from './components/MainCard';\nimport WeekWeatherCard from './components/WeekCard';\nimport SearchInput from './components/SearchInput';\nimport { AppWrapper, DayCardWrapper, WeekCardWrapper } from './styles/app';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mainCardData, setMainCardData] = useState(null);\n  const [country, setCountry] = useState('');\n  const [city, setCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [coordsLoaded, setCoordsLoaded] = useState(false);\n  const [coords, setCoords] = useState({});\n  const input = document.input;\n  useEffect(() => {\n    if (input === '') {\n      return navigator.geolocation.getCurrentPosition(position => {\n        setCoords({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n        setCoordsLoaded(true);\n      });\n    } else {\n      console.log('teste');\n    }\n  }, [coordsLoaded]);\n  useEffect(() => {\n    if (Object.keys(coords).length !== 0) {\n      fetchData();\n    }\n  }, [coords]);\n  async function fetchData() {\n    let latitude = coords.latitude;\n    let longitude = coords.longitude;\n    const initialResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&exclude=hourly,daily&appid=ddbe22c4ca49e54f138a28fc1067af55&lang=pt_br&units=metric`);\n    const response = await initialResponse.json();\n    setWeatherData(response.list);\n    setMainCardData(response.list[0]);\n    setCity(response.city.name);\n    setCountry(response.city.country);\n  }\n  return /*#__PURE__*/_jsxDEV(AppWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(SearchInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DayCardWrapper, {\n      children: mainCardData && /*#__PURE__*/_jsxDEV(MainWeatherCard, {\n        maxTemperature: mainCardData.main.temp_max,\n        minTemperature: mainCardData.main.temp_min,\n        cityName: city,\n        country: country,\n        icon: mainCardData.weather[0].icon,\n        description: mainCardData.weather[0].description,\n        date: mainCardData.dt_txt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeekCardWrapper, {\n      children: weatherData && weatherData.map((day, index) => /*#__PURE__*/_jsxDEV(WeekWeatherCard, {\n        maxTemperature: day.main.temp_max,\n        minTemperature: day.main.temp_min,\n        humidity: day.main.humidity,\n        icon: day.weather[0].icon,\n        date: day.dt_txt\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qWTN97LOBj6TPW7E0ZN7ZU51268=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","MainWeatherCard","WeekWeatherCard","SearchInput","AppWrapper","DayCardWrapper","WeekCardWrapper","App","mainCardData","setMainCardData","country","setCountry","city","setCity","weatherData","setWeatherData","coordsLoaded","setCoordsLoaded","coords","setCoords","input","document","navigator","geolocation","getCurrentPosition","position","latitude","longitude","console","log","Object","keys","length","fetchData","initialResponse","fetch","response","json","list","name","main","temp_max","temp_min","weather","icon","description","dt_txt","map","day","index","humidity"],"sources":["/Users/alboom/Desktop/Projects/weather-report/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport MainWeatherCard from './components/MainCard';\nimport WeekWeatherCard from './components/WeekCard';\nimport SearchInput from './components/SearchInput';\n\nimport { AppWrapper, DayCardWrapper, WeekCardWrapper } from './styles/app'\n\nfunction App() {\n  const [mainCardData, setMainCardData] = useState(null)\n  const [country, setCountry] = useState('')\n  const [city, setCity] = useState('')\n  const [weatherData, setWeatherData] = useState(null)\n  const [coordsLoaded, setCoordsLoaded] = useState(false)\n  const [coords, setCoords] = useState({})\n  const input = document.input\n\n  useEffect(() => {\n    if (input === '') {\n      return navigator.geolocation.getCurrentPosition(position => {\n        setCoords({ latitude: position.coords.latitude, longitude: position.coords.longitude })\n        setCoordsLoaded(true)\n      })\n    } else {\n      console.log('teste')\n    }\n  }, [coordsLoaded])\n\n  useEffect(() => {\n    if(Object.keys(coords).length !== 0) {\n      fetchData()\n    }\n  }, [coords])\n  \n  async function fetchData() {\n    let latitude = coords.latitude\n    let longitude = coords.longitude\n    const initialResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&exclude=hourly,daily&appid=ddbe22c4ca49e54f138a28fc1067af55&lang=pt_br&units=metric`)\n    const response = await initialResponse.json()\n    setWeatherData(response.list)\n    setMainCardData(response.list[0])\n    setCity(response.city.name)\n    setCountry(response.city.country)\n  }\n  return (\n    <AppWrapper>\n      <SearchInput />\n      <DayCardWrapper>\n        {mainCardData && (\n          <MainWeatherCard \n          maxTemperature={mainCardData.main.temp_max} \n          minTemperature={mainCardData.main.temp_min} \n          cityName={city}\n          country={country}\n          icon={mainCardData.weather[0].icon}\n          description={mainCardData.weather[0].description}\n          date={mainCardData.dt_txt}\n          />\n        )}\n      </DayCardWrapper>\n      <WeekCardWrapper>\n        {weatherData && weatherData.map((day, index) => (\n          <WeekWeatherCard \n          key={index} \n          maxTemperature={day.main.temp_max} \n          minTemperature={day.main.temp_min} \n          humidity={day.main.humidity} \n          icon={day.weather[0].icon}\n          date={day.dt_txt}\n          />\n        ))}\n      </WeekCardWrapper>\n    </AppWrapper>\n\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}